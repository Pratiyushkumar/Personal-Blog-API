generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id         String      @id @default(uuid())
    fullname   String      @db.VarChar(255)
    email      String      @unique @db.VarChar(255)
    password   String      @db.VarChar(255)
    username   String      @unique @db.VarChar(50)
    avatar_url String?     @db.VarChar(255)
    bio        String?     @db.Text
    created_at DateTime    @default(now())
    updated_at DateTime    @updatedAt
    Session    Session[]
    Posts      Posts[]
    Comments   Comments[]
    Media      Media[]
    PostLikes  PostLikes[]
}

model Session {
    id         String   @id @default(uuid())
    user_id    String
    token      String   @unique @db.VarChar(255)
    created_at DateTime @default(now())
    expired_at DateTime
    user       User     @relation(fields: [user_id], references: [id])
}

model Posts {
    id               String           @id @default(uuid())
    title            String
    slug             String?          @unique
    featured_img_url String?
    content          String           @db.Text
    author_id        String
    category_id      String?
    created_at       DateTime         @default(now())
    updated_at       DateTime         @updatedAt
    author           User             @relation(fields: [author_id], references: [id])
    comments         Comments[]
    postTags         PostTags[]
    postLikes        PostLikes[]
    postCategories   PostCategories[]
}

model Categories {
    id          String           @id @default(uuid())
    name        String           @unique
    slug        String?          @unique
    description String?
    created_at  DateTime         @default(now())
    updated_at  DateTime         @updatedAt
    posts       PostCategories[]
}

model PostCategories {
    post        Posts      @relation(fields: [post_id], references: [id])
    post_id     String
    category    Categories @relation(fields: [category_id], references: [id])
    category_id String

    @@id([post_id, category_id])
}

model Tags {
    id         String     @id @default(uuid())
    name       String     @unique
    slug       String?    @unique
    created_at DateTime   @default(now())
    PostTags   PostTags[]
}

model Comments {
    id                String   @id @default(uuid())
    post_id           String
    user_id           String
    description       String   @db.Text
    parent_comment_id String?
    created_at        DateTime @default(now())
    updated_at        DateTime @updatedAt

    post           Posts      @relation(fields: [post_id], references: [id], onDelete: Cascade)
    user           User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
    parent_comment Comments?  @relation("CommentsToComments", fields: [parent_comment_id], references: [id], onDelete: SetNull)
    replies        Comments[] @relation("CommentsToComments")

    @@map("comments")
}

model PostTags {
    post_id String
    tag_id  String
    post    Posts  @relation(fields: [post_id], references: [id])
    tag     Tags   @relation(fields: [tag_id], references: [id])

    @@id([post_id, tag_id])
}

model Media {
    id          String   @id @default(uuid())
    file_name   String
    file_url    String
    file_type   String
    file_size   String
    created_at  DateTime @default(now())
    uploaded_by String
    uploader    User     @relation(fields: [uploaded_by], references: [id])
}

model PostLikes {
    id         String   @id @default(uuid())
    likeCount  Int
    post_id    String
    user_id    String
    created_at DateTime @default(now())
    post       Posts    @relation(fields: [post_id], references: [id])
    user       User     @relation(fields: [user_id], references: [id])
}
